@page "/solution/{year:int}/{day:int}"


@if (Solution is null)
{
    <p>The solution was not found.</p>
    return;
}

<PageTitle>@Solution.Title - @Solution.Year Day @Solution.Day Advent of Code</PageTitle>
<h2>Day @Solution.Day - @Solution.Title</h2>

<p>
    <MatButtonLink Href="@($"https://adventofcode.com/{Solution.Year}/day/{Solution.Day}")" Target="_blank">
        Advent of Code
    </MatButtonLink>
    <MatButtonLink Href="@($"https://github.com/sandervanteinde/advent-of-code/blob/main/Sandervanteinde.AdventOfCode2021.Solutions/{Solution.Year}/Day{Solution.Day:X2}.cs")" Target="_blank">
        View Code
    </MatButtonLink>
</p>

<EditForm Model="StepOne">
    <p>
        <MatTextField @bind-Value="StepOne" Label="Input" TextArea="true" FullWidth="true" />
    </p>
    <p>
        <MatButton OnClick="CalculateStepOne">Calculate Step One</MatButton>
        <MatButton OnClick="CalculateStepTwo">Calculate Step Two</MatButton>
    </p>
</EditForm>

@if(Result != string.Empty)
{
    <p>
        <EditForm Model="Result">
            <MatTextField @bind-Value="Result" Label="Result" TextArea="true" ReadOnly="true" FullWidth="true" />
        </EditForm>
    </p>
}

@code {
    [Inject]
    public SolutionRegistry Registry { get; set; } = null!;

    [Inject]
    public HttpClient Client { get; set; } = null!;

    public IAdventOfCodeSolution? Solution { get; set; } = null;

    [Parameter]
    public int Year { get; set; }

    [Parameter]
    public int Day { get; set; }

    public string StepOne { get; private set; } = string.Empty;

    public string Result { get; private set; } = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        Result = string.Empty;
        var solution = Registry.GetSolution(Year, Day);
        Solution = solution;

        if(Solution is not null)
        {
            StepOne = await Client.GetStringAsync($"sample-data/{Solution.StepOneFileName()}?cacheBust={DateTime.Now.Ticks}");
        }
    }

    private void CalculateStepOne() => SetResult(() => Solution!.GetStepOneResult(StepOne));

    private void CalculateStepTwo() => SetResult(() => Solution!.GetStepTwoResult(StepOne));

    private void SetResult(Func<string> resultSelector)
    {
        try
        {
            Result = resultSelector();
        }
        catch (PlatformNotSupportedException)
        {
            Result = "This solution requires technology that is not available in Blazor WASM";
        }
        catch(Exception ex)
        {
            Result = $"An exception occured:{Environment.NewLine}{ex.Message}";
        } 
    }
}