@page "/solution/{year:int}/{day:int}"


@if (Solution is null)
{
    <p>The solution was not found.</p>
    return;
}

<PageTitle>@Solution.Title - Advent of Code</PageTitle>
<h2>@Solution.Title</h2>

<p>
    <MatButtonLink Href="@($"https://adventofcode.com/{Solution.Year}/day/{Solution.Day}")" Target="_blank">
        Advent of Code
    </MatButtonLink>
</p>

<EditForm Model="StepOne">
    <p>
        <MatTextField @bind-Value="StepOne" Label="Input" TextArea="true" FullWidth="true" />
    </p>
    <p>
        <MatButton OnClick="CalculateStepOne">Calculate</MatButton>
    </p>
</EditForm>

@if(Result != string.Empty)
{
    <p>
        <EditForm Model="Result">
            <MatTextField @bind-Value="StepOne" Label="Result" TextArea="true" ReadOnly="true" FullWidth="true" />
        </EditForm>
    </p>
}

@code {
    [Inject]
    public SolutionRegistry Registry { get; set; } = null!;

    [Inject]
    public HttpClient Client { get; set; } = null!;

    public IAdventOfCodeSolution? Solution { get; set; } = null;

    [Parameter]
    public int Year { get; set; }

    [Parameter]
    public int Day { get; set; }

    public string StepOne { get; private set; } = string.Empty;

    public string Result { get; private set; } = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        Result = string.Empty;
        var solution = Registry.GetSolution(Year, Day);
        Solution = solution;

        if(Solution is not null)
        {
            StepOne = await Client.GetStringAsync($"sample-data/{Solution.StepOneFileName()}");
        }
    }

    private void CalculateStepOne()
    {
        Result = Solution!.GetStepOneResult(StepOne);
    }
}